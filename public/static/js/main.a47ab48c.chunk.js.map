{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","finished","setFinished","currentQuestion","setCurrentQuestion","currentImage","setCurrentImage","currentText","setCurrentText","selectedSound","setSelectedSound","currentSound","soundLink","sound","setSound","useEffect","Audio","usePlaySound","eventName","handler","element","window","savedHandler","useRef","current","addEventListener","eventListener","event","removeEventListener","useEventListener","e","key","play","console","log","loading","image","text","getNextQuestion","trace","fetch","then","response","json","data","className","style","margin","id","onClick","display","justifyContent","width","src","alt","file","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a47ab48c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState, useRef } from 'react';\r\nimport logo from './logo.svg';\r\n\r\nimport './App.css';\r\nimport 'bulma/css/bulma.css'\r\n\r\nfunction App() {\r\n\r\n  const defaultImage = \"/images/start.jpg\";\r\n  const defaultSuccess = \"/sounds/applause.mp3\";\r\n  const defaultAww = \"/sounds/awww.mp3\";\r\n  const defaultText = \"Click next to load next question\";\r\n  const [finished, setFinished] = useState();\r\n  const [currentQuestion, setCurrentQuestion] = useState({});\r\n  const [currentImage, setCurrentImage] = useState(defaultImage)\r\n  const [currentText, setCurrentText] = useState(defaultText)\r\n  const [selectedSound, setSelectedSound] = useState()\r\n\r\n\r\n  const currentSound = usePlaySound(selectedSound)\r\n\r\n  useEventListener('keydown', (e) => {\r\n\r\n    if (currentQuestion.key && !finished) {\r\n\r\n      if (currentQuestion.key === e.key) {\r\n        setSelectedSound(defaultSuccess)\r\n      } else {\r\n        setSelectedSound(defaultAww)\r\n      }\r\n\r\n      setFinished(true)\r\n\r\n    }\r\n\r\n  });\r\n\r\n  function usePlaySound(soundLink) {\r\n\r\n\r\n    const [sound, setSound] = useState();\r\n\r\n\r\n    useEffect(() => {\r\n\r\n      setSound(new Audio(soundLink))\r\n\r\n\r\n\r\n    }, [soundLink])\r\n\r\n\r\n\r\n    return sound;\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    if (currentSound) {\r\n      currentSound.play()\r\n    }\r\n\r\n\r\n  }, [currentSound])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    console.log(currentQuestion)\r\n    if (!currentQuestion.loading) {\r\n\r\n      setCurrentImage(currentQuestion.image)\r\n      setCurrentText(currentQuestion.text)\r\n    }\r\n\r\n\r\n\r\n  }, [currentQuestion])\r\n\r\n\r\n  const getNextQuestion = () => {\r\n    console.log(\"running get next question\")\r\n    setCurrentQuestion({ loading: true })\r\n    setFinished(false)\r\n    console.trace();\r\n\r\n    fetch('/api/nextLetter').then((response) => { return response.json() }).then((data) => {\r\n\r\n      setCurrentQuestion(data)\r\n\r\n\r\n\r\n\r\n    })\r\n  }\r\n\r\n\r\n\r\n  function playCurrentQuestion() {\r\n\r\n    if (!currentQuestion.file && !currentQuestion.loading) {\r\n      setCurrentText(\"Question not selected yet. Click next to select a question\")\r\n    }\r\n    else {\r\n      console.log(currentQuestion.file)\r\n      setSelectedSound(currentQuestion.file)\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <div style={{ margin: \"10px\" }}>\r\n        <button id=\"next-button\" onClick={() => { getNextQuestion() }} className=\"button is-large is-warning\">Next</button>\r\n      </div>\r\n      <div id=\"scoreboard\">\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n      \r\n      \r\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        <div className=\"card\" style={{ width: \"300px\" }}>\r\n          <div className=\"card-image\">\r\n            <figure className=\"image is-4by3\">\r\n              <img  src={currentImage || defaultImage} alt=\"Placeholder image\" />\r\n            </figure>\r\n          </div>\r\n          <div className=\"card-content\">\r\n            <p className=\"title\">\r\n              {currentText}\r\n            </p>\r\n            <div><button onClick={() => { playCurrentQuestion() }} className=\"button is-large\">Play</button></div>\r\n          </div>\r\n          <footer className=\"card-footer\" >\r\n\r\n            <p className=\"card-footer-item\">\r\n              <span>\r\n                <button className=\"button is-large is-danger\" onClick={() => {\r\n                  setFinished(true);\r\n\r\n                  setSelectedSound(defaultAww)\r\n                }} >Awwww</button>\r\n\r\n\r\n              </span>\r\n            </p>\r\n            <p className=\"card-footer-item\" onClick={getNextQuestion}>\r\n              <span>\r\n                <button id=\"success-button\" onClick={() => { setFinished(true); setSelectedSound(defaultSuccess) }} className=\"button is-large is-success\">Success</button>\r\n              </span>\r\n            </p>\r\n\r\n          </footer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nfunction useEventListener(eventName, handler, element = window) {\r\n  // Create a ref that stores handler\r\n  const savedHandler = useRef();\r\n\r\n  // Update ref.current value if handler changes.\r\n  // This allows our effect below to always get latest handler ...\r\n  // ... without us needing to pass it in effect deps array ...\r\n  // ... and potentially cause effect to re-run every render.\r\n  useEffect(() => {\r\n    savedHandler.current = handler;\r\n  }, [handler]);\r\n\r\n  useEffect(\r\n    () => {\r\n      // Make sure element supports addEventListener\r\n      // On \r\n      const isSupported = element && element.addEventListener;\r\n      if (!isSupported) return;\r\n\r\n      // Create event listener that calls handler function stored in ref\r\n      const eventListener = event => savedHandler.current(event);\r\n\r\n      // Add event listener\r\n      element.addEventListener(eventName, eventListener);\r\n\r\n      // Remove event listener on cleanup\r\n      return () => {\r\n        element.removeEventListener(eventName, eventListener);\r\n      };\r\n    },\r\n    [eventName, element] // Re-run if eventName or element changes\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}